# -*- coding: utf-8 -*-
"""Indian_Music_Rag_Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1b6yPnCmUp_dEzV5iL9VshvfvzA_q_3YR
"""

!pip install opendatasets

!pip install python_speech_features

import tensorflow as tf
import librosa
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import librosa.display
from IPython.display import Audio
import os
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow.keras.models import load_model
from scipy.io import wavfile
from python_speech_features import mfcc,logfbank
import re

import opendatasets as od
od.download("https://www.kaggle.com/datasets/kcwaghmarewaghmare/indian-music-raga?resource=download")

file = "/content/indian-music-raga/"

Features=[]
labels = []

for f in os.listdir(file):
  signal, rate = librosa.load(file+f,sr=44100)
  mel = mfcc(signal[:rate],rate,numcep=13,nfilt=26,nfft=1103).T
  Features.append(mel)
  file_path = os.path.join(file,f)
  path_parts = file_path.split('/')
  label = path_parts[-1]
  path_parts_second = label.split('.')
  label = path_parts_second[-2]
  match = re.match(r'([^0-9]+)', label)
  if match:
    label = match.group(1)
    labels.append(label)

Features = np.array(Features)
labels = np.array(labels)

def manual_one_hot_encoding(labels, num_classes):
    num_samples = len(labels)
    one_hot_encoded = np.zeros((num_samples, num_classes))
    one_hot_encoded[np.arange(num_samples), labels] = 1
    return one_hot_encoded

le = LabelEncoder()
labels_encoded = le.fit_transform(labels)
num_classes = len(np.unique(labels_encoded))
labels_onehot = manual_one_hot_encoding(labels_encoded, num_classes)

X_train, X_test, Y_train, Y_test = train_test_split(Features, labels_onehot, test_size=0.2, random_state=42)

X_train = X_train.reshape(X_train.shape[0], X_train.shape[1], X_train.shape[2], 1)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], X_test.shape[2], 1)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Input,Dropout
from tensorflow import keras

input_shape = (X_train.shape[1], X_train.shape[2],1)
model = Sequential()
model.add(Conv2D(16,(3,3),activation='relu',strides=(1,1),padding="same",input_shape=input_shape))
model.add(Conv2D(32,(3,3),activation = 'relu',strides=(1,1),padding="same"))
model.add(Conv2D(64,(3,3),activation = 'relu',strides=(1,1),padding="same"))
model.add(Conv2D(128,(3,3),activation = 'relu',strides=(1,1),padding="same"))
model.add(MaxPooling2D(2,2))
model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(128,activation='relu'))
model.add(Dense(64,activation='relu'))
model.add(Dense(11,activation='softmax'))

model.summary()

from tensorflow.keras.optimizers import Adam
learning_rate = 0.001  # Set your desired learning rate
optimizer = Adam(learning_rate=learning_rate)
model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])

history = model.fit(X_train,Y_train,validation_data=(X_test,Y_test),batch_size=32,epochs=100)

def make_predictions(model, le, file_path):
    rate, signal = wavfile.read(file_path)
    mel = mfcc(signal[:rate],rate,numcep=13,nfilt=26,nfft=1103).T
    mel = mel.reshape(1,mel.shape[0],mel.shape[1],1)
    predicted_vector = model.predict(mel)
    predicted_class_index = np.argmax(predicted_vector, axis=-1)
    return le.inverse_transform(predicted_class_index)[0]

Rag = make_predictions(model,le,"/content/indian-music-raga/bageshree24.wav")

Rag

model.save("Rag_classificarion.h5")

from tensorflow.keras.models import load_model

model_1 = load_model("/content/Rag_classificarion.h5")

Rag = make_predictions(model_1,le,"/content/indian-music-raga/bageshree24.wav")
display(Audio("/content/indian-music-raga/bageshree24.wav"))
Rag

File_path = []
Predicted_label = []
for f in os.listdir(file):
  file_path = os.path.join(file,f)
  File_path.append(file_path)
  predicted_label = make_predictions(model_1,le,file_path)
  Predicted_label.append(predicted_label)

df = pd.DataFrame(File_path)

Features=[]
labels = []

for f in os.listdir(file):
  signal, rate = librosa.load(file+f,sr=44100)
  mel = mfcc(signal[:rate],rate,numcep=13,nfilt=26,nfft=1103).T
  Features.append(mel)
  file_path = os.path.join(file,f)
  path_parts = file_path.split('/')
  label = path_parts[-1]
  path_parts_second = label.split('.')
  label = path_parts_second[-2]
  match = re.match(r'([^0-9]+)', label)
  if match:
    label = match.group(1)
    labels.append(label)

accuracy = 0
labelss = []

for f in os.listdir(file):
  file_path = os.path.join(file,f)
  path_parts = file_path.split('/')
  label = path_parts[-1]
  path_parts_second = label.split('.')
  label = path_parts_second[-2]
  match = re.match(r'([^0-9]+)', label)
  if match:
    label = match.group(1)
    labelss.append(label)

  Rag = make_predictions(model,le,file_path)
  if Rag==label:
    accuracy = accuracy+1;



accuracy = (accuracy/len(labelss))*100
print(f"Accuracy is : {accuracy}")
